#! /usr/bin/python

###########
# Imports #
###########

import random
import math
import itertools

##########################
# Lists and Dictionaries #
##########################

card_deck = [
  'Hooded One (7)    ',
  'Enchanter (3)     ',
  'Shepherd (4)      ',
  'Tempter           ',
  'Raven             ',
  'Seer              ',
  'Swashbuckler (1)  ',
  'Executioner       ',
  'Ghost             ',
  'Warrior           ',
  'Tax Collector (8) ',
  'Anarchist (6)     ',
  'Marionette        ',
  'Miser (9)         ',
  'Torturer (9)      ',
  'Priest            ',
  'Traitor (9)       ',
  'Paladin (2)       ',
  'Thief (7)         ',
  'Beast             ',
  'Guild Member (5)  ',
  'Healer (3)        ',
  'Darklord          ',
  'Myrmidon (5)      ',
  'Elementalist (5)  ',
  'Diviner (2)       ',
  'Abjurer (4)       ',
  'Artifact          ',
  'Avenger (1)       ',
  'Beggar (6)        ',
  'Beserker (6)      ',
  'Bishop (8)        ',
  'Broken One        ',
  'Charlatan (7)     ',
  'Conjurer (9)      ',
  'Dictator (8)      ',
  'Donjon            ',
  'Druid (5)         ',
  'Evoker (6)        ',
  'Horseman          ',
  'Illusionist (7)   ',
  'Innocent          ',
  'Missionary (2)    ',
  'Mists             ',
  'Monk (1)          ',
  'Necromancer (8)   ',
  'Philanthropist (2)',
  'Rogue             ',
  'Soldier (3)       ',
  'Trader (3)        ',
  'Transmuter (1)    ',
  'Wizard            ',
  'Mercenary (4)     ',
  'Merchant (4)      '
]

race_desc = [
  "Dwarf              - Bold, hardy, warrior, miner, long memory and grudges",
  "Mountain Dwarf     - Strong, hardy, rugged, tall for a dwarf",
  "Hill Dwarf         - Keen senses, deep intuition, remarkable resilience",
  "Elf                - Magical people of otherworldly grace, in but not of the world",
  "Wood Elf           - Keen senses and intuition, fleet feet, and stealth",
  "High Elf           - Keen mind and master of basic magic",
  "Drow               - Follow the god Lolth down the path of evil and corruption",
  "Halfling           - You love peace, food, hearth, and home",
  "Lightfoot Halfling - You can easily hide, are inclined to get along with others",
  "Stout Halfling     - Hardier than average and may be part dwarven blood",
  "Human              - Young, short-lived race, innovators and achievers",
  "Dragonborn         - A servant to dragons, a warrior, or a drifter",
  "Gnome              - You delight in life, are an inventor, explorer, and explorer",
  "Forest Gnome       - Knack for illusion and inherent quickness and stealth",
  "Half-Elf           - Curious, inventive, ambitious, love nature, artistic",
  "Half-Orc           - Adventurer with savage fury and barbaric customs",
  "Tiefling           - Demonic heritage, self-reliant, suspicious, drifter"
]

race_short = [
  "Dwarf", "Mountain Dwarf", "Hill Dwarf", "Elf", "Wood Elf", "High Elf", "Drow", "Halfling", "Lightfoot Halfling", "Stout Halfling", "Human", "Dragonborn", "Gnome", "Forest Gnome", "Half-Elf", "Half-Orc", "Tiefling"
]

class_desc = [
  "Barbarian - The relentless combatant fueld by fury.",
  "Bard      - A story witty storyteller or musician.",
  "Cleric    - A holy man capable of helaing wounds.",
  "Druid     - A nomad devoted to the powers of Nature",
  "Fighter   - The skilled combatant and strategist.",
  "Monk      - A martial artist pulling bodily powers.",
  "Paladin   - A novice fighter bolstered by divine magic.",
  "Ranger    - One who blends wilderness knowledge and martial ability",
  "Rogue     - The theif, assassin, and stealthy character.",
  "Sorcerer  - A magic user who draws power from within.",
  "Warlock   - Pacted to a diety for empowering spells.",
  "Wizard    - Keeper of arcane secrets and manipulator of magic."
  ]
## Class Descriptions - https://redd.it/2e9vzl

class_short = [
  "Barbarian", "Bard", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard"
]

avg_stats = [
  "   Race        Hieght  Weight        Lifespan",
  "   ----        ------  ------        --------",
  "   Dwarf:      4-5'    150 lbs.      350 years",
  "   Elf:        5-6'+   150-170 lbs.  750 years",
  "   Halfling:   3-4'    40 lbs.       150 years",
  "   Human:      5-6'    130-200 lbs.  < 100 years",
  "   Dragonborn: > 6'    250 lbs.      < 100 years",
  "   Gnome:      3-4'    40 lbs.       350 years",
  "   Half-Elf:   5-6'    130-170 lbs.  180 years",
  "   Half-Orc:   5-6'+   150-230 lbs.  < 80 years",
  "   Tiefling:   5-6'    130-200 lbs.  100 years"
]
  
abilities = [
  "   Strength:      natural athleticism, bodily power",
  "   Dexterity:     physical agility, reflexes, balance, poise",
  "   Constitution:  health, stamina, vital force",
  "   Intelligence:  mental acuity, information recall, analytical skill",
  "   Wisdom:        awareness, intuition, insight",
  "   Charisma:      confidence, eloquence, leadership",
]

#############
# Functions #
#############

def draw_cards_fn():
  global drawn_cards
  drawn_cards = random.sample(card_deck, 5)

  global pos_1
  global pos_2
  global pos_3
  global pos_4
  global pos_5

  pos_1 = random.choice(drawn_cards)
  drawn_cards.remove(pos_1)

  pos_2 = random.choice(drawn_cards)
  drawn_cards.remove(pos_2)

  pos_3 = random.choice(drawn_cards)
  drawn_cards.remove(pos_3)

  pos_4 = random.choice(drawn_cards)
  drawn_cards.remove(pos_4)

  pos_5 = random.choice(drawn_cards)
  drawn_cards.remove(pos_5)

def reveal_cards_fn():
  print("         |--------|")
  print("         |        |")
  print("         | Card 2 |")
  print("         |        |")
  print("|--------|--------|--------|")
  print("|        |        |        |")
  print("| Card 1 | Card 5 | Card 3 |")
  print("|        |        |        |")
  print("|--------|--------|--------|")
  print("         |        |")
  print("         | Card 4 |")
  print("         |        |")
  print("         |--------|")

  print("")
  print("Card 1 - ", pos_1)
  print("The Tome of Strahd (location): This card tells of history.  Knowledge of the ancient will help you better understand your enemy")

  print("")
  print("Card 2 - ", pos_2)
  print("The Holy Symbol of Ravenkind (location):  This card tells of a powerful force for good and protection, a symbol of great hope")

  print("")
  print("Card 3 - ", pos_3) 
  print("The Sunsword (location):  This is a card of power and strength.  It tells of a weapon of vengeance:  a sword of sunlight")

  print("")
  print("Card 4 - ", pos_4)
  print("Strahd's Enemy (where to find an ally:  This card sheds light on one who will help you greatly in the battle against darkness")

  print("")
  print("card 5 - ", pos_5)
  print("Strahd (location):  Your enemy is a creature of darkness, whose powers are beyond mortality.  This card will lead you to him")
  
def wild_magic_fn():
  global roll
  roll = random.randrange(1,100)
  if roll in (1,2):
    print("Roll on this table at the start of each of your turns for the next minute, ignoring this result on subsequent rolls")
  elif roll in (3,4):
    print("For the next minute, you can see any invisible creature if you have line of sight to it")
  elif roll in (5,6):
    print("A modron chosen and controlled by the DM appears in an unoccupied space within 5 feet of you , then disappears 1 minute later")
  elif roll in (7,8):
    print("You cast 'fireball' as 3rd-level spell centered on yourself")
  elif roll in (9,10):
    print("You cast 'magic missile' as 5th-level spell") 
  elif roll in (13,14):
    print("You cast 'confusion' centered on yourself")
  elif roll in (15,16):
    print("For the next minute, you regain 5 hit points at the start of each of your turns")
  elif roll in (17,18):
    print("You grow a long beard made of feathers that remains until you sneeze, at which point the feathers explode out from your face")
  elif roll in (19,20):
    print("You cast 'grease' centered on yourself")
  elif roll in (21,22):
    print("Creatures have disadvantage on svaing throws against the next spell you cast in the next minute that inbolbes a saving throw")
  elif roll in (23,24):
    print("Your skin turns a vibrant shade of blue.  A 'remove curse' spell can end this effect")
  elif roll in (25,26):
    print("An eye appears on your forehead for the next minute.  During that time, you have advantage on Wisdom (Perception) checks that rely on sight")
  elif roll in (27,28):
    print("For the next minute, all your spells with a casting time of 1 action have a cating time of 1 bonus action")
  elif roll in (29,30):
    print("You teleport up to 60 feet to an unoccupied space of your choice tha tyou can see")
  elif roll in (31,32):
    print("You are transported to the Astral Plan until the end of your next turn, after which time you return to the space you previously occupied or the nearest unoccupied space if that space is occupied")
  elif roll in (33,34):
    print("Maximize the damage of the next damaging spell you cast within the next minute")
  elif roll in (41,42):
    print("You turn into a potted plant until the start of your next turn.  While a plant, you are incapacitated and have vulnerability to all damage.  If you drop to 0 hit points, your pot breaks, and your form revert")
  elif roll in (43,44):
    print("For the next minute, you can teleport up to 20 feet as a bonus action on each of your turns")
  elif roll in (45,46):
    print("You cast 'levitate' on yourself")
  elif roll in (47,48):
    print("A unicorn controlled by the DM appears in a space within 5 feet of you, then disappears 1 minute later")
  elif roll in (49,50):
    print("You can't speak for the next minute.  Whenever you try, pink bubbles float out of your mouth")
  elif roll in (51,52):
    print("A spectral shield hovers near you for the next minute, granting you a +2 bonus to AC and immunity to 'magic missile'")
  elif roll in (55,56):
    print("Your hair falls out but grows back within 24 hours")
  elif roll in (57,58):
    print("For the next minute, any flammable object you touch that isn't being worn or carried by another creature bursts into flames")
  elif roll in (59,60):
    print("You regain your lowest-level expended spell slot")
  elif roll in (61,62):
    print("For the next minute, you must shout when you speak")
  elif roll in (63,64):
    print("You cast 'fog cloud' centered on yourself")
  elif roll in (67,68):
    print("You are frightened by the nearest creature until the end of your next turn")
  elif roll in (69,70):
    print("Each creature within 30 feet of you becomes invisible for the next minute.  The invisibility ends on a creature when it attacks or casts a spell")
  elif roll in (71,72):
    print("You gain resistance to all damage for the next minute")
  elif roll in (75,76):
    print("You glow with bright light in a 30-foot radius for the next minute.  Any creature that ends its turn within 5 feet of you is blinded until the end of its next turn")
  elif roll in (77,78):
    print("You cast 'polymorph' on yourself.  If you fail the saving throw, you turn into a sheep for the spell's duration")
  elif roll in (79,80):
    print("Illusory butterflies and flower petals flutter in the air within 10 feet of you for the next minute")
  elif roll in (81,82):
    print("You can take one additional action immediately")
  elif roll in (85,86):
    print("You cast 'mirror image'")
  elif roll in (87,88):
    print("You cast 'fly' on a random creature within 60 feet of you")
  elif roll in (89,90):
    print("You become invisible for the next minute.  During that time, other creatures can't hear you.  The invisibility ends if you attack or cast a spell")
  elif roll in (91,92):
    print("If you die wihtin the next minute, you immediately come back to life as if by the 'reincarnate' spell")
  elif roll in (93,94):
    print("Your size increases by one size category for the next minute")
  elif roll in (95,96):
    print("You and all creatures within 30 feet of you gain vulnerability to piercing damage for the next minute")
  elif roll in (97,98):
    print("You are surrounded by faint, ethereal music for the next minute")
  elif roll in (99,100):
    print("You regain all expended sorcery points")
  elif roll in (11,12):
    def roll_2_fn():
      roll_2 = random.randint(1,10)
      if roll_2 in (1,3,5,7,9):
        print("You shrink ",roll_2," inches")
      else:
        print("You grow ",roll_2," inches")
    roll_2_fn()
  elif roll in (35,36):
    def roll_3_fn():
      roll_3 = random.randint(1,10)
      if roll_3 in (1,3,5,7,9):
        print ("You grow ",roll_3," years younger - minimum of one year")
      else:
        print("You grow ",roll_3," years older")
    roll_3_fn()
  elif roll in (37,38):
    def roll_4_fn():
      global roll_4
      roll_4 = random.randint(1,4)
    roll_4_fn()
    print(roll_4," flumphs controlled by the DM appear in unoccupied spaces within 60 feet of you and are firghtened of you.  They vanish after 1 minute")

  elif roll in (39,40):
    def roll_5_fn():
      global roll_5
      roll_5 = random.randint(1,10)
      roll_5 = (roll_5 * 2)
    roll_5_fn()
    print("You regain ",roll_5," hit points")
  elif roll in (53,54):
    def roll_6_fn():
      global days_n
      for _ in itertools.repeat(None,5):
        days_n = random.randrange(1,6)
    roll_6_fn()
    print("You are immiune to being intoxicated by alcohol for the next ",days_n," days")
  elif roll in (65,66):
    def roll_7_fn():
      global damage
      for _ in itertools.repeat(None,4):
        damage = random.randint(1,10)
    roll_7_fn()
    print("Up to three creatures you choose within 30 feet of you take ",damage," lightning damage")
  elif roll in (73,74):
    def roll_8_fn():
      global hours
      hours = random.randint(1,4)
    roll_8_fn()
    print("A random creature within 60 feet of you becomes poisoned for ",hours," hours")
  elif roll in (83,84):
    def roll_9_fn():
      global damage
      damage = random.randint(1,10)
    roll_9_fn()
    print("Each creature within 30 feet of you takes ",damage," necrotic damage.  You regain hit points equa to the sum damage")
  else:
    pass
  
def start_fn():
  print('')
  print('        What would you like to do?          ')
  print('        1) (C)reate Character               ')
  print('        2) (R)oll Dice                      ')
  print('        3) Tarokka Fortune Cards            ')
  print('        4) Wild Magic (Roll Effect)         ')
  print('        0) (Q)uit                           ')
  print('')
  option = input('What would you like to do? ')
  if option in ('C', 'c', '1'):
    pass
  elif option in ('R', 'r', '2'):
    dice = int(input('How many dice? '))
    sides = int(input('How many sides on each die? '))
    for _ in itertools.repeat(None, dice):
      print(random.randrange(1,sides))
      start_fn()
  elif option == '3':
    draw_cards_fn()
    reveal_cards_fn()
    start_fn()
  elif option == '4':
    wild_magic_fn()
    start_fn()
  elif option in ('Q', 'q', '0'):
    quit()
  else:
    start()

def race_fn():
  global char_race
  print('Available Races Include:')
  print('  (R)andom')
  for char_race in race_desc:
    print('  ',char_race)
  char_race = input('Enter Your Race (effects age, height, weight): ')
  if char_race in race_short:
    pass
  elif char_race in ('R', 'r', 'Random', 'random'):
    char_race = (random.choice(race_short))
  else:
    print('Race not available')
    race_fn()

def class_fn():
  def choose_class():
    global char_class
    print('Available Classes Include:')
    print('  (R)andom')
    for char_class in class_desc:
      print('  ',char_class)
    char_class = input('Enter Your Class: ')
    if char_class in ('R', 'r', 'Random', 'random'):
      char_class = (random.choice(class_short))
    elif char_class not in class_short:
      print('Class not available')
      choose_class()
    else:
      pass
  choose_class()

def height_fn ():
  def height_mod_fn ():
    global height_mod
    if char_race in ('Dwarf', 'Hill Dwarf', 'Mountain Dwarf', 'Lightfoot Halfling', 'Stout Halfling', 'Forest Gnome', 'Gnome'):
      height_mod = random.randrange(1,4) + random.randrange(1,4)
    elif char_race == 'Drow':
      height_mod = random.randrange(1,6) + random.randrange(1,6)
    elif char_race in ('Dragonborn', 'Half-Elf', 'Tiefling'):
      height_mod = random.randrange(1,8) + random.randrange(1,8)
    elif char_race in ('Human', 'High Elf', 'Wood Elf', 'Elf'):
      height_mod = random.randrange(1,10) + random.randrange(1,10)
    else: 
      pass

  def rnd_height_fn():
    if char_race == 'Human':
      height = 56 + height_mod
    elif char_race in ('Dwarf', 'Hill Dwarf'):
      height = 44 + height_mod
    elif char_race == 'Mountain Dwarf':
      height = 48 + height_mod
    elif char_race in ('Elf', 'High Elf', 'Wood Elf'):
      height =  54 + height_mod
    elif char_race == 'Drow':
      height = 53 + height_mod
    elif char_race in ('Halfling', 'Lightfoot Halfling', 'Stout Halfling'):
      height = 31 + height_mod
    elif char_race == 'Dragonborn':
      height = 66 + height_mod
    elif char_race in ('Gnome', 'Forest Gnome'):
      height = 35 + height_mod
    elif char_race in ('Half-Elf', 'Tiefling'):
      height = 57 + height_mod
    elif char_race == 'Half-Orc':
      height = 58 + height_mod
    else:
      pass
    global char_heightft
    global char_heightin
    char_heightft = math.trunc(height/12)
    char_heightin = height % 12

  print('Select Character Height:')
  for entry in avg_stats:
    print(entry)
  print('Your race is', char_race)
  height_mod_fn()
  rnd_height = input('Do you want a random height? ')
  if rnd_height in ('Y', 'y', 'Yes', 'yes'):
    rnd_height_fn()
  elif rnd_height in ('N', 'n', 'No', 'no'):
    height = int(input('Enter your height in total inches: '))
    global char_heightft
    global char_heightin
    char_heightft = math.trunc(height/12)
    char_heightin = height % 12
  else:
    print(rnd_height, ' is not a valid choice')
    height_fn()

def weight_fn():
  def weight_mod_fn():
    global weight_mod
    if  char_race in ('Human', 'Half-Elf', 'Tiefling'):
      weight_mod = height_mod * (random.randrange(1,4) + random.randrange(1,4))
    elif char_race in ('Hill Dwarf', 'Mountain Dwarf', 'Dragonborn', 'Half-Orc'):
      weight_mod = height_mod * (random.randrange(1,6) + random.randrange(1,6))
    elif char_race in ('High Elf', 'Wood Elf', 'Elf'):
      weight_mod = height_mod * random.randrange(1,4)
    elif char_race == 'Drow':
      weight_mod = height_mod * random.randrange(1,6)
    elif char_race in ('Halfling', 'Gnome', 'Forest Gnome'):
      weight_mod = height_mod
    else:
      pass

  def rnd_weight_fn():
    global char_weight
    if char_race in ('Human', 'Half-Elf', 'Tiefling'):
      char_weight = 110 + weight_mod
    if char_race in ('Dwarf', 'Hill Dwarf'):
      char_weight = 115 + weight_mod
    if char_race == 'Mountain Dwarf':
      char_weight = 130 + weight_mod
    if char_race in ('Elf', 'High Elf'):
      char_weight = 90 + weight_mod
    if char_race == 'Wood Elf':
      char_weight = 100 + weight_mod
    if char_race == 'Drow':
      char_weight = 75 + weight_mod
    if char_race in ('Halfling', 'Lightfoot Halfling', 'Stout Halfling', 'Gnome', 'Forest Gnome'):
      char_weight = 35 + weight_mod
    if char_race == 'Dragonborn':
      char_weight = 175 + weight_mod
    if char_race == 'Half-Orc':
      char_weight = 140 + weight_mod

  print('Select Character Weight:')
  for entry in avg_stats:
    print(entry)
  print('Your race is' , char_race)
  weight_mod_fn()
  global rnd_height
  rnd_weight = input('Do you want a random weight? ')
  if rnd_weight in ('Y', 'y', 'Yes', 'yes'):
    rnd_weight_fn()
  elif rnd_weight in ('N', 'n', 'No', 'no'):
    weight = int(input('Enter your weight in pounds: '))
  else:
    print(rnd_weight, ' is not a valid choice')
    weight_fn()

def misc_fn():
  global char_gender
  global char_age
  print('Miscellaneous Characteristics:')
  for entry in avg_stats:
    print(entry)
  rnd_age = input('Do you want a random age? ')
  if rnd_age in ('Y', 'y', 'Yes', 'yes'):
    if char_race in ('Dwarf', 'Mountain Dwarf', 'Hill Dwarf'):
      char_age = random.randrange(125,350)
    if char_race in ('Elf', 'Wood Elf', 'High Elf', 'Drow'):
      char_age = random.randrange(175,750)
    if char_race in ('Halfling', 'Lightfoot Halfling', 'Stout Halflingl'):
      char_age = random.randrange(50,150)
    if char_race == 'Human':
      char_age = random.randrange(18,100)
    if char_race == 'Dragonborn':
      char_age = random.randrange(18,100)
    if char_race in ('Gnome', 'Forest Gnome'):
      char_age = random.randrange(100,150)
    if char_race == 'Half-Elf':
      char_age = random.randrange(62,180)
    if char_race == 'Half-Orc':
      char_age = random.randrange(30,80)
    if char_race == 'Tiefling':
      char_age = random.randrange(18,100)
  elif rnd_age in ('N', 'n', 'No', 'no'):
    char_age = int(input('Enter character age: '))
  else:
    print('Not a valid choice')
    misc_fn()
  char_gender = input('Enter character gender: ')

def name_fn():
  global char_name
  global plyr_name
  plyr_name = input('Enter Player Name: ')
  char_name = input('Enter Character Name: ')

def abilities_fn():
  def stat_roll():
	    d1 = random.randrange(1,6)
	    d2 = random.randrange(1,6)
	    d3 = random.randrange(1,6)
	    d4 = random.randrange(1,6)
	    raw_rolls = [d1,d2,d3,d4]
	    sorted_rolls = sorted(raw_rolls)
	    del sorted_rolls[0]
	    total = sum(sorted_rolls)
	    return total
  def strength():
    global abl_str
    abl_str = int(input('Enter the score to use for Strength: '))
    if abl_str not in abl_scores:
      print('Score not valid')
      strength()
    else:
      abl_scores.remove(abl_str)
  def dexterity():
	  print('Remaining Scores: ', abl_scores)
	  global abl_dex
	  abl_dex = int(input('Enter the score to use for Dexterity: '))
	  if abl_dex not in abl_scores:
	     print('Score not valid')
	     dexterity()
	  else:
	     abl_scores.remove(abl_dex)
  def constitution():
	  print('Remaining Scores: ', abl_scores)
	  global abl_con
	  abl_con = int(input('Enter the score to use for Constitution: '))
	  if abl_con not in abl_scores:
	    print('Score not valid')
	    constitution()
	  else:
	     abl_scores.remove(abl_con)
  def intelligence():
	  print('Remaining Scores: ', abl_scores)
	  global abl_int
	  abl_int = int(input('Enter the score to use for Intelligence: '))
	  if abl_int not in abl_scores:
	    print('Score not valid')
	    intelligence()
	  else:
	    abl_scores.remove(abl_int)
  def wisdom():
	  print('Remaining Scores: ', abl_scores)
	  global abl_wis
	  abl_wis = int(input('Enter the score to use for Wisdom: '))
	  if abl_wis not in abl_scores:
	    print('Score not valid')
	    wisdom()
	  else:
	    abl_scores.remove(abl_wis)
  def charisma():
	  print('Remaining Scores: ', abl_scores)
	  global abl_cha
	  abl_cha = int(input('Enter the score to use for Charisma: '))
	  if abl_cha not in abl_scores:
	    print('Score not valid')
	    charisma()
	  else:
	    abl_scores.remove(abl_cha)
  def assign():
    rnd_assign = input('Do you want to randomly assign stat rolls? ')
    if rnd_assign in ('Y', 'y', 'Yes', 'yes'):
      abl_ls = ['str', 'dex', 'con', 'int', 'wis', 'char']
      random.shuffle(abl_scores)
      global abl_str
      global abl_dex
      global abl_int
      global abl_con
      global abl_wis
      global abl_cha
      abl_str = random.choice(abl_scores)
      abl_scores.remove(abl_str)
      abl_dex = random.choice(abl_scores)
      abl_scores.remove(abl_dex)
      abl_con = random.choice(abl_scores)
      abl_scores.remove(abl_con)
      abl_int = random.choice(abl_scores)
      abl_scores.remove(abl_int)
      abl_wis = random.choice(abl_scores)
      abl_scores.remove(abl_wis)
      abl_cha = random.choice(abl_scores)
    elif rnd_assign in ('N', 'n', 'No', 'no'):
      strength()
      dexterity()
      constitution()
      intelligence()
      wisdom()
      charisma()
    else:
      print('Invalid choice')
      assign()
  print('Rolling random ability scores...')
  score1 = stat_roll()
  score2 = stat_roll()
  score3 = stat_roll()
  score4 = stat_roll()
  score5 = stat_roll()
  score6 = stat_roll()
  abl_scores = [score1,score2,score3,score4,score5,score6]
  print('  Your Rolles Scores Are: ', abl_scores)
  reroll = input('  Do You Want to [C]ontinue or [R]eroll? ')
  if reroll in ('C', 'c', 'Continue', 'continue'):
    assign()
    print('The Scores You Assigned Were:')
    print('   Strength: ', abl_str)
    print('   Dexterity: ', abl_dex)
    print('   Constitution: ', abl_con)
    print('   Intelligence: ', abl_int)
    print('   Wisdom: ', abl_wis)
    print('   Charisma: ', abl_cha)
    choice = input('Do you want to (C)ontinue, Re(A)ssign, or (R)eroll? ')
    if choice in ('R', 'r', 'Reroll', 'reroll'):
      abilities_fn()
    elif choice in ('A', 'a', 'Reassign', 'reassign', 'ReAssign'):
      assign()
    else:
      pass
  else:
    abilities_fn()

def race_bonus_fn():
  global abl_str
  global abl_dex
  global abl_con
  global abl_int
  global abl_wis
  global abl_cha
  print('Specific races give bonuses to certain ability scores.')
  print('The race you selected was: ', char_race,)
  print('Checking for Strength Bonus...')
  if char_race in ('Mountain Dwarf', 'Dragonborn', 'Half-Orc', 'Human'):
    print('   ... you got a bonus!')
    if char_race == 'Human':
      abl_str = abl_str + 1
    else:
      abl_str = abl_str + 2
  else:
    pass
  print('Checking for Dexterity Bonus...')
  if char_race in ('Elf', 'Wood Elf', 'High Elf', 'Drow', 'Halfling', 'Lightfoot Halfling', 'Forest Gnome', 'Human'):
    print('   ... you got a bonus!')
    if char_race == 'Human':
      abl_dex = abl_dex + 1
    else:
      abl_dex = abl_dex + 2
  else:
    pass
  print('Checking for Constitution Bonus...')
  if char_race in ('Dwarf', 'Mountain Dwarf', 'Hill Dwarf', 'Stout Halfling', 'Rock Gnome', 'Half-Orc', 'Human'):
    print('   ... you got a bonus!')
    if char_race in ('Dwarf', 'Mountain Dwarf', 'Hill Dwarf'):
      abl_con = abl_con + 2
    else:
      abl_con = abl_con + 1
  else:
    pass
  print('Checking for Intelligence Bonus...')
  if char_race in ('High Elf', 'Gnome', 'Forest Gnome', 'Tiefling', 'Human'):
    print('   ... you got a bonus!')
    if char_race in ('Gnome', 'Forest Gnome'):
      abl_int = abl_int + 2
    else:
      abl_int = abl_int + 1
  else:
    pass
  print('Checking for Wisdom Bonus...')
  if char_race in ('Hill Dwarf', 'Wood Elf', 'Human'):
    print('   ... you got a bonus!')
    abl_wis = abl_wis + 1
  else:
    pass
  print('Checking for Charisma Bonus...')
  if char_race in ('Half-Elf', 'Drow', 'Lightfoot Halfling', 'Dragonborn', 'Human', 'Tiefling'):
    print('   ... you got a bonus!')
    if char_race in ('Half-Elf', 'Tiefling'):
      abl_cha = abl_cha + 2
    else:
      abl_cha = abl_cha + 2
  else:
    pass

def modifiers_fn():
  global mod_str
  global mod_dex
  global mod_con
  global mod_int
  global mod_wis
  global mod_cha
  global char_ac
  global prim_stat
  global atk_bonus
  print('Each ability score provides a modier score which benefits certain attributes.')
  def mod(ability):
    if ability == 1:
      mod = -5
      return mod
    elif ability in (2,3):
      mod = -4
      return mod
    elif ability in (4,5):
      mod = -3
      return mod
    elif ability in (6,7):
      mod = -2
      return mod
    elif ability in (8,9):
      mod = -1
      return mod
    elif ability in (10,11):
      mod = +0
      return mod
    elif ability in (12,13):
      mod = 1
      return mod
    elif ability in (14,15):
      mod = 2
      return mod
    elif ability in (16,17):
      mod = 3
      return mod
    elif ability in (18,10):
      mod = 4
      return mod
    elif ability in (20,21):
      mod = 5
      return mod
    elif ability in (22,23):
      mod = 6
      return mod
    elif ability in (24,25):
      mod = 7
      return mod
    elif ability in (26,27):
      mod = 8
      return mod
    elif ability in (28,29):
      mod = 9
      return mod
    elif ability == 30:
      mod = 10
      return mod
    else:
      pass
  mod_str = mod(abl_str)
  mod_dex = mod(abl_dex)
  mod_con = mod(abl_con)
  mod_int = mod(abl_int)
  mod_wis = mod(abl_wis)
  mod_cha = mod(abl_cha)
  char_ac = mod_dex + 10
  print('Here are your Ability Scores and (Modifier):')
  print('   Armor Class ', char_ac)
  print('   Strength    ', mod_str)
  print('   Dexterity   ', mod_dex)
  print('   Constitution', mod_con)
  print('   Intelligence', mod_int)
  print('   Wisdom      ', mod_wis)
  print('   Charisma    ', mod_cha)
  print('Each character also gets an attack modifier based on their proficiency bonus + main stat modifier')
  print('The proficiency bonus for Lvl 1 characters is 2')
  print('Your class is: ', char_class, '. Calculating attack bonus...')
  if char_class in ('Barbarian'):
    prim_stat = 'Strength'
  elif char_class in ('Bard', 'Sorcerer', 'Warlock'):
    prim_stat = 'Charisma'
  elif char_class in ('Cleric', 'Druid'):
    prim_stat = 'Wisdom'
  elif char_class == 'Fighter':
    prim_stat = input('Choose (S)trength or (D)exterity: ')
    if prim_stat in ('S', 's', 'Strength', 'strength'):
      prim_stat = 'Strength'
    elif prim_stat in ('D', 'd', 'Dexterity', 'dexterity'):
      prim_stat = 'Dexterity'
    else:
      print('Choice not valid')
      modifiers_fn()
  elif char_class in ('Monk', 'Ranger'):
    prim_stat = input('Choose (D)exterity or (W)isdom: ')
    if prim_stat in ('D', 'd', 'Dexterity', 'dexterity'):
      prim_stat = 'Dexterity'
    elif prim_stat in ('W', 'w', 'Wisdom', 'wisdom'):
      prim_stat = 'Wisdom'
    else:
      print('Choice not valid')
      modifiers_fn()
  elif char_class == 'Paladin':
    # str or cha
    prim_stat = input('Choose between (S)trength and (C)harisma: ')
    if prim_stat in ('S', 's', 'Strength', 'strength'):
      prim_stat = 'Strength'
    elif prim_stat in ('C', 'c', 'Charisma', 'charisma'):
      prim_stat = 'Charisma'
  elif char_class == 'Rogue':
    prim_stat = 'Dexterity'
  else:
    # Wizard
    prim_stat = 'Intelligence'
  if prim_stat == 'Strength':
    atk_bonus = mod_str + 2
  if prim_stat == 'Dexterity':
    atk_bonus = mod_dex + 2
  if prim_stat == 'Intelligence':
    atk_bonus = mod_int + 2
  if prim_stat == 'Wisdom':
    atk_bonus = mod_wis + 2
  if prim_stat == 'Charisma':
    atk_bonus = mod_cha + 2
  print('Your primary stat is: ', prim_stat)
  print('Your attack bonus is: ', atk_bonus)
  
def hp_fn():
  global char_hp
  print('Now we need to calculate hit points.')
  if char_class in ('Barbarian'):
    hit_die = random.randint(1,12)
    char_hp = mod_con + hit_die
    print('You scored ', char_hp, ' hit points')
  elif char_class in ('Fighter', 'Paladin', 'Ranger'):
    hit_die = random.randint(1,10)
    char_hp = mod_con + hit_die
    print('You scored ', char_hp, ' hit points')
  elif char_class in ('Wizard', 'Sorcerer'):
    hit_die = random.randint(1,6)
    char_hp = mod_con + hit_die
    print('You scored ', char_hp, ' hit points')
  else:
    hit_die = random.randint(1,8)
    char_hp = mod_con + hit_die
    print('You scored ', char_hp, ' hit points')
  
def alignment_fn():
  def lawchaos():
    global align_lawchaos
    align_lawchaos = input('Choose (L)awful, (C)haotic, or (N)eutral: ')
    if align_lawchaos in ('L', 'l', 'Lawful', 'lawful'):
      align_lawchaos = 'Lawful'
    elif align_lawchaos in ('C', 'c', 'Chaotic', 'chaotic'):
      align_lawchaos = 'Chaotic'
    elif align_lawchaos in ('N', 'n', 'Neutral', 'neutral'):
      align_lawchaos = 'Neutral'
    else:
      print('Invalid choice')
      lawchaos()
  def goodevil():
    global align_goodevil
    align_goodevil = input('Choose (G)ood, (E)vil, or (N)eutral: ')
    if align_goodevil in ('G', 'g', 'Good', 'good'):
      align_goodevil = 'Good'
    elif align_goodevil in ('E', 'e', 'Evil', 'evil'):
      align_goodevil = 'Evil'
    elif align_goodevil in ('N', 'n', 'Neutral', 'neutral'):
      align_goodevil = 'Neutral'
    else:
      print('Invalid choice')
      goodevil()
  def cont():
    choice = input('Is this correct? (y/n) ')
    if choice in ('Y', 'y', 'Yes', 'yes'):
      pass
    elif choice in ('N', 'n', 'No', 'no'):
      alignment_fn()
    else:
      cont()
  rnd_align = input('Finally choose alignment.  Do you want to use a random alignment? ')
  if rnd_align in ('Y', 'y', 'Yes', 'yes'):
    goodevil_ls = ['Good', 'Evil', 'Neutral']
    lawchaos_ls = ['Lawful', 'Chaotic', 'Neutral']
    global align_lawchaos
    global align_goodevil
    align_lawchaos = random.choice(lawchaos_ls)
    align_goodevil = random.choice(goodevil_ls)
  elif rnd_align in ('N', 'n', 'No', 'no'):
    lawchaos()
    goodevil()
  else:
    print ('Invalid choice')
    alignment_fn()
  print('Your alignment is ', align_lawchaos, '-', align_goodevil)

def summary_fn():
  print('##########################################')
  print('#                Summary                 #')
  print('##########################################')
  print(plyr_name, "'s: ", char_race, '-', char_class)
  print(char_name)
  print('##########################################')
  print('Height:         ', char_heightft, "'", char_heightin, '"')
  print('Weight:         ', char_weight, 'lbs.')
  print('Age:            ', char_age, 'years old')
  print('Gender:         ', char_gender)
  print('Alignment:      ', align_lawchaos, '-', align_goodevil)
  print('##########################################')
  print('Max Hit Points: ', char_hp)
  print('Armor Class:    ', char_ac)
  print('Attack Bonus:   ', atk_bonus)
  print('Primary Stat:   ', prim_stat)
  print('##########################################')
  print('Strength:       ', abl_str,  '(', mod_str, ')')
  print('Dexterity:      ', abl_dex,  '(', mod_dex, ')')
  print('Constitution:   ', abl_con,  '(', mod_con, ')')
  print('Intelligence:   ', abl_int,  '(', mod_int, ')')
  print('Wisdom:         ', abl_wis,  '(', mod_wis, ')')
  print('Charisma:       ', abl_cha,  '(', mod_cha, ')')
  start_fn()

# Script
start_fn()
print('')
race_fn()
print('')
class_fn()
print('')
height_fn()
print('')
weight_fn()
print('')
misc_fn()
print('')
name_fn()
print('')
abilities_fn()
print('')
race_bonus_fn()
print('')
modifiers_fn()
print('')
hp_fn()
print('')
alignment_fn()
print('')
summary_fn()